#! /usr/bin/perl

##--------------------------------------------------------------------##
##--- Massif's results printer                         ms_print.in ---##
##--------------------------------------------------------------------##

#  This file is part of Massif, a Valgrind tool for profiling memory
#  usage of programs.
#
#  Copyright (C) 2007-2007 Nicholas Nethercote
#     njn@valgrind.org
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#  02111-1307, USA.
#
#  The GNU General Public License is contained in the file COPYING.

use warnings;
use strict;

# XXX:
# - move graph printing stuff into a separate subroutine
# - merge read_input_file[12]

#----------------------------------------------------------------------------
# Global variables, main data structures
#----------------------------------------------------------------------------

# Command line of profiled program.
my $cmd;

# Time unit used in profile.
my $time_unit;

# Threshold dictating what percentage an entry must represent for us to
# bother showing it.
my $threshold = 1.0;

# Input file name
my $input_file = undef;

# Version number
my $version = "XXX";

# Usage message.
my $usage = <<END
usage: ms_print [options] <file>

  options for the user, with defaults in [ ], are:
    -h --help             show this message
    -v --version          show version
    --threshold=<n>       significance threshold, in percent [$threshold]

  You must use either --<pid> or specify exactly one profile file
  so that ms_print knows what file to read profile data from.

  ms_print is Copyright (C) 2007-2007 Nicholas Nethercote.
  and licensed under the GNU General Public License, version 2.
  Bug reports, feedback, admiration, abuse, etc, to: njn\@valgrind.org.
                                                
END
;

# Used in various places of output.
my $fancy    = '-' x 80;
my $fancy_nl = $fancy . "\n";

# Returns 0 if the denominator is 0.
sub safe_div_0($$)
{
    my ($x, $y) = @_;
    return ($y ? $x / $y : 0);
}

#-----------------------------------------------------------------------------
# Argument and option handling
#-----------------------------------------------------------------------------
sub process_cmd_line() 
{
    my @files;
    for my $arg (@ARGV) { 

        # Option handling
        if ($arg =~ /^-/) {

            # --version
            if ($arg =~ /^-v$|^--version$/) {
                die("ms_print-$version\n");

            # XXX: consider making threshold /100, like massif itself
            # --threshold=X (tolerates a trailing '%')
            } elsif ($arg =~ /^--threshold=([\d\.]+)%?$/) {
                $threshold = $1;
                ($1 >= 0 && $1 <= 100) or die($usage);

            } else {            # -h and --help fall under this case
                die($usage);
            }
        } else {
            # Not an option.  Remember it as a filename. 
            push(@files, $arg);
        }
    }

    # Must have chosen exactly one input file.
    if (scalar @files) {
        $input_file = $files[0];
    } else {
        die($usage);
    }
}

#-----------------------------------------------------------------------------
# Reading the input file: auxiliary functions
#-----------------------------------------------------------------------------

# Gets the next line, stripping comments and skipping blanks.
# Returns undef at EOF.
sub get_line()
{
    while (my $line = <INPUTFILE>) {
        $line =~ s/#.*$//;          # remove comments
        $line =~ s/==\d+==.*$//;    # remove Valgrind output lines   XXX
        if ($line !~ /^\s*$/) {
            return $line;           # return $line if non-empty
        }
    }
    return undef;       # EOF: return undef
}

sub equals_num_line($$)
{
    my ($line, $fieldname) = @_;
    (defined($line) and $line =~ s/^$fieldname=(.*)\s*$//) or
        die("Line $.: expected \"$fieldname\" line, got:\n$line\n");
    return $1;
}

sub get_equals_num_line($)
{
    my ($fieldname) = @_;
    my $line = get_line();
    return equals_num_line($line, $fieldname);
}

sub is_significant_XPt($$$)
{
    my ($is_top_node, $xpt_szB, $total_szB) = @_;
    ($xpt_szB <= $total_szB) or die;
    # Nb: we always consider the alloc-XPt significant, even if the size is
    # zero.
    return $is_top_node || 0 == $threshold ||
        ( $total_szB != 0 && $xpt_szB * 100 / $total_szB >= $threshold );
}

# Forward declaration, because it's recursive.
sub read_heap_tree($$$$$$);

# Return pair:  if the tree was significant, both are zero.  If it was
# insignificant, the first element is 1 and the second is the number of
# bytes.
sub read_heap_tree($$$$$$)
{
    # Read the line and determine if it is significant.
    my ($print, $is_top_node, $this_prefix, $child_midfix, $arrow,
        $mem_total_B) = @_;
    my $line = get_line();
    (defined $line and $line =~ /^\s*n(\d+):\s*(\d+)(.*)$/)
        or die("Line $.: expected a tree node line, got:\n$line\n");
    my $n_children = $1;
    my $bytes      = $2;
    my $details    = $3;
    my $perc       = safe_div_0(100 * $bytes, $mem_total_B);
    # Nb: we always print the alloc-XPt, even if its size is zero.
    my $is_significant = is_significant_XPt($is_top_node, $bytes, $mem_total_B);

    # We precede this node's line with "$this_prefix.$arrow".  We precede
    # any children of this node with "$this_prefix$child_midfix$arrow".
    if ($print && $is_significant) {
        # Nb: $details might have '%' in it, so don't embed directly in the
        # format string.
        printf("$this_prefix$arrow%05.2f%% (${bytes}B)%s\n", $perc, $details);
    }

    # Now read all the children.
    my $n_insig_children = 0;
    my $total_insig_children_szB = 0;
    my $this_prefix2 = $this_prefix . $child_midfix;
    for (my $i = 0; $i < $n_children; $i++) {
        # If child is the last sibling, the midfix is empty.
        my $child_midfix2 = ( $i+1 == $n_children ? "  " : "| " );
        my ($is_child_insignificant, $child_insig_bytes) =
            # '0' means it's not the top node of the tree.
            read_heap_tree($print, 0, $this_prefix2, $child_midfix2, "->",
                $mem_total_B);
        $n_insig_children += $is_child_insignificant;
        $total_insig_children_szB += $child_insig_bytes;
    }

    if ($is_significant) {
        # If this was significant but any children were insignificant, print
        # the "in N places" line for them.
        if ($print && $n_insig_children > 0) {
            $perc = safe_div_0(100 * $total_insig_children_szB, $mem_total_B);
            printf("%s->%05.2f%% (%dB) in %d+ places, all below "
                 . "ms_print's threshold (%05.2f%%)\n",
                $this_prefix2, $perc, $total_insig_children_szB,
                $n_insig_children, $threshold);
            print("$this_prefix2\n");
        }

        # If this node has no children, print an extra (mostly) empty line.
        if ($print && 0 == $n_children) {
            print("$this_prefix2\n");
        }
        return (0, 0);

    } else {
        return (1, $bytes);
    }
}

#-----------------------------------------------------------------------------
# Reading the input file: pass 1
#-----------------------------------------------------------------------------

# This pass is just for printing the graph.  It just collects the snapshot
# times and total sizes from the file and then prints the graph.
#
# XXX: should probably combine read_input_file[12] into a single function
# with some conditionals in it.
sub read_input_file1() 
{
    my $desc = "";              # Concatenated description lines.
    my @snapshot_nums = ();
    my @times         = ();
    my @mem_total_Bs  = ();
    my @is_detaileds  = ();
    my $peak_mem_total_szB = 0;
    
    open(INPUTFILE, "< $input_file") 
         || die "Cannot open $input_file for reading\n";

    # Read "desc:" lines.
    my $line;
    while ($line = get_line()) {
        if ($line =~ s/^desc:\s*//) {
            $desc .= $line;
        } else {
            last;
        }
    }

    # Read "cmd:" line (Nb: will already be in $line from "desc:" loop above).
    ($line =~ /^cmd:\s*(.*)$/) or
        die("Line $.: missing 'cmd' line\n");
    $cmd = $1;

    # Read "time_unit:" line.
    $line = get_line();
    ($line =~ /^time_unit:\s*(.*)$/) or
        die("Line $.: missing 'time_unit' line\n");
    $time_unit = $1;

    # Read body of input file.
    $line = get_line();
    while (defined $line) {
        # XXX: equals_num_line vs get_equals_num_line is ugly
        my $snapshot_num     =     equals_num_line($line, "snapshot");
        my $time             = get_equals_num_line("time");
        my $mem_total_B      = get_equals_num_line("mem_total_B");
        my $mem_heap_B       = get_equals_num_line("mem_heap_B");
        my $mem_heap_admin_B = get_equals_num_line("mem_heap_admin_B");
        my $mem_stacks_B     = get_equals_num_line("mem_stacks_B");
        my $heap_tree        = get_equals_num_line("heap_tree");

        # Skip over the heap_tree
        if      ($heap_tree eq "empty") {
            # do nothing
        } elsif ($heap_tree eq "...") {
            # Depth in the heap tree.  '0' means the tree should not be
            # printed. '1' means it's the top node of the tree.
            read_heap_tree(0, 1, "", "", "", $mem_total_B);
        } else {
            die("Line $.: expected 'empty' or '...' after 'heap_tree='\n");
        }

        # Remember the pertinent information
        push(@snapshot_nums, $snapshot_num);
        push(@times,         $time);
        push(@mem_total_Bs,  $mem_total_B);
        push(@is_detaileds,  ( $heap_tree eq "empty" ? 0 : 1 ));
        $peak_mem_total_szB = $mem_total_B
            if $mem_total_B > $peak_mem_total_szB;

        $line = get_line();
    }

    close(INPUTFILE);

    #-------------------------------------------------------------------------
    # Print header
    #-------------------------------------------------------------------------
    # XXX: print the massif invocation and the ms_print invocation
    print($fancy_nl);
    print("Command:   $cmd\n");
    print("Data file: $input_file\n");
    print("$desc");
    print($fancy_nl);
    print("\n\n");

    #-------------------------------------------------------------------------
    # Print graph
    #-------------------------------------------------------------------------
    # The ASCII graph.
    # Row    0 ([0..GRAPH_X][0]) is the X-axis.
    # Column 0 ([0][0..GRAPH_Y]) is the Y-axis.
    # The rest ([1][1]..[GRAPH_X][GRAPH_Y]) is the usable graph area.
    my $GRAPH_X = 72;       # XXX: Make these command-line options, with
    my $GRAPH_Y = 20;       # sensible min/max values (eg. 10--1000)
    my @graph;
    my $x;
    my $y;

    # We increment end_ms_time by 1 so that the last snapshot occurs just
    # before it, and doesn't spill over into the final column.
    my $n_snapshots = scalar(@snapshot_nums);
    ($n_snapshots > 0) or die;
    my $end_time = $times[$n_snapshots-1] + 1;
    ($end_time > 0) or die;

    # Setup graph[][].
    $graph[0][0] = '+';                                     # axes join point
    for ($x = 1; $x <= $GRAPH_X; $x++) { $graph[$x][0] = '-'; } # X-axis
    for ($y = 1; $y <= $GRAPH_Y; $y++) { $graph[0][$y] = '|'; } # Y-axis
    for ($x = 1; $x <= $GRAPH_X; $x++) {                        # usable area
       for ($y = 1; $y <= $GRAPH_Y; $y++) {
          $graph[$x][$y] = ' ';
       }
    }

    # Write snapshot bars into graph[][].
    #
    # Each row represents K bytes, which is 1/GRAPH_Yth of the peak size
    # (and K can be non-integral).  When drawing the column for a snapshot,
    # in order to fill the slot in row y (where the first row drawn on is
    # row 1) with a half-char (eg. '.'), it must be >= (y - 1/2)*K.  In
    # order to fill a row/column spot with a full-char (eg. ':'), it must be
    # >= y*K.  For example, if K = 10 bytes, then the values 0, 4, 5, 9, 10,
    # 14, 15, 19, 20, 24, 25, 29, 30 would be drawn like this (showing one
    # per column):
    #
    #                       y    (y - 1/2) * K          y * K
    #                       -    -------------          -----------
    # 30 |          ..:     3    (3 - 1/2) * 10 = 25    3 * 10 = 30
    # 20 |      ..:::::     2    (2 - 1/2) * 10 = 15    2 * 10 = 20
    # 10 |  ..:::::::::     1    (1 - 1/2) * 10 = 5     1 * 10 = 10
    # 0  +-------------

    my $detailed_full_char = '@';
    my $normal_full_char   = ':';
    my $half_char          = '.';

    # Work out how many bytes each row represents.  If the peak size was 0,
    # make it 1 so that the Y-axis covers a non-zero range of values.
    if (0 == $peak_mem_total_szB) { $peak_mem_total_szB = 1; }
    my $K = $peak_mem_total_szB / $GRAPH_Y;

    for (my $i = 0; $i < $n_snapshots; $i++) {
 
        # Work out which column this snapshot belongs to.
        my $x_pos_frac = ($times[$i] / $end_time) * $GRAPH_X;
        $x = int($x_pos_frac) + 1;    # +1 due to Y-axis
 
        # Draw the column only if it's a detailed snapshot, or we don't
        # already have a detailed snapshot's bar in this column -- we don't
        # want to overwrite detailed snapshot's bars with non-detailed
        # snapshot's bars.
        my $should_draw_column = 
            ($is_detaileds[$i] or $graph[$x][0] ne $detailed_full_char);
        if ($should_draw_column) {
            # If it's detailed, mark the X-axis.  Also choose the full-slot
            # char.
            my $full_char;
            if ($is_detaileds[$i])  {
                $graph[$x][0] = $detailed_full_char;
                $full_char = $detailed_full_char;
            } else {
                $full_char = $normal_full_char;
            }
            # Grow this snapshot bar from bottom to top.
            for ($y = 1; $y <= $GRAPH_Y; $y++) {
                if ($mem_total_Bs[$i] >= ($y - 1/2) * $K) {
                    $graph[$x][$y] = $half_char;
                } 
                if ($mem_total_Bs[$i] >= $y * $K) {
                    $graph[$x][$y] = $full_char;
                }
            }
        }
    }

    # Work out the units for the Y-axis.
    my $orders_of_magnitude = 0;
    my $unit;
    my $peak_mem_total_szBscaled = $peak_mem_total_szB;
    while ($peak_mem_total_szBscaled > 1000) {
        $orders_of_magnitude++;
        $peak_mem_total_szBscaled /= 1000;
    }
    if    (0 == $orders_of_magnitude) { $unit = ' '; } 
    elsif (1 == $orders_of_magnitude) { $unit = 'k'; } 
    elsif (2 == $orders_of_magnitude) { $unit = 'M'; } 
    elsif (3 == $orders_of_magnitude) { $unit = 'G'; } 
    elsif (4 == $orders_of_magnitude) { $unit = 'T'; } 
    else { die("unknown order of magnitude: $orders_of_magnitude\n"); }

    # Print graph[][].
    for ($y = $GRAPH_Y; $y >= 0; $y--) {
        # Row prefix (ie. X-axis label)
        if ($GRAPH_Y == $y) {            # top point
           if ($peak_mem_total_szBscaled < 10) {
                printf("%3.1f%s", $peak_mem_total_szBscaled, $unit);
            } else {
                printf("%3d%s", $peak_mem_total_szBscaled, $unit);
            }
        } elsif (0 == $y) {              # bottom point
            print("  0 ");
        } else {                         # anywhere else
            print("    ");
        }
          
        # Axis and data for the row.
        for ($x = 0; $x <= $GRAPH_X; $x++) {
            printf("%s", $graph[$x][$y]);
        }
        print("\n");
    }

    #-------------------------------------------------------------------------
    # Print snapshot numbers
    #-------------------------------------------------------------------------
    print("\n\n");
    print("Number of snapshots: $n_snapshots\n");
    print(" Detailed snapshots: [");
    my $first_detailed = 1;
    for (my $i = 0; $i < $n_snapshots; $i++) {
        if ($is_detaileds[$i]) {
            if ($first_detailed) {
                printf("$i");
                $first_detailed = 0;
            } else {
                printf(", $i");
            }
        }
    }
    print("]\n");
}

#-----------------------------------------------------------------------------
# Reading the input file: pass 2
#-----------------------------------------------------------------------------

# This pass is for printing the snapshots.  It prints them as it reads in
# the file (as opposed to reading it all in and then dumping the output at
# the end).
sub read_input_file2() 
{
    open(INPUTFILE, "< $input_file") 
         || die "Cannot open $input_file for reading\n";

    # Read "desc:" lines.
    my $line;
    while ($line = get_line()) {
        if ($line !~ s/^desc:\s*//) {
            last;
        }
    }

    # Read "cmd:" line (Nb: will already be in $line from "desc:" loop above).
    ($line =~ /^cmd:\s*(.*)$/) or die("Line $.: missing command line\n");

    # Read "time_unit:" line.
    $line = get_line();
    ($line =~ /^time_unit:\s*(.*)$/) or
        die("Line $.: missing 'time_unit' line\n");


    #-------------------------------------------------------------------------
    # Print snapshot list header
    #-------------------------------------------------------------------------
    my $time_column = sprintf("%14s", "time($time_unit)");
    my $column_format = "%3s %14s %16s %16s %13s %12s\n";
    my $header =
        $fancy_nl .
        sprintf($column_format
        ,   "n"
        ,   $time_column
        ,   "total(B)"
        ,   "useful-heap(B)"
        ,   "admin-heap(B)"
        ,   "stacks(B)"
        ) .
        $fancy_nl;
    print($header);

    #-------------------------------------------------------------------------
    # Print snapshot list
    #-------------------------------------------------------------------------
    # Read body of input file.
    $line = get_line();
    while (defined $line) {
        # XXX: equals_num_line vs get_equals_num_line is ugly
        my $snapshot_num     =     equals_num_line($line, "snapshot");
        my $time             = get_equals_num_line("time");
        my $mem_total_B      = get_equals_num_line("mem_total_B");
        my $mem_heap_B       = get_equals_num_line("mem_heap_B");
        my $mem_heap_admin_B = get_equals_num_line("mem_heap_admin_B");
        my $mem_stacks_B     = get_equals_num_line("mem_stacks_B");
        my $heap_tree        = get_equals_num_line("heap_tree");

        # Print snapshot details.
        printf($column_format,
        ,   $snapshot_num
        ,   commify($time)
        ,   commify($mem_total_B)
        ,   commify($mem_heap_B)
        ,   commify($mem_heap_admin_B)
        ,   commify($mem_stacks_B)
        );
        
        if      ($heap_tree eq "empty") {
            # do nothing
        } elsif ($heap_tree eq "...") {
            # Depth in the heap tree.  '1' means the tree should be printed.
            # '1' means it's the top node of the tree.  Then reprint the
            # header.  
            read_heap_tree(1, 1, "", "", "", $mem_total_B);
            # XXX: don't print the header if there are no more snapshots!
            # (see tests/thresholds.c for an example)
            print($header);
        } else {
            die("Line $.: expected 'empty' or '...' after 'heap_tree='\n");
        }
        $line = get_line();
    }

    close(INPUTFILE);
}

#-----------------------------------------------------------------------------
# Misc functions
#-----------------------------------------------------------------------------
sub commify ($) {
    my ($val) = @_;
    1 while ($val =~ s/^(\d+)(\d{3})/$1,$2/);
    return $val;
}


#----------------------------------------------------------------------------
# "main()"
#----------------------------------------------------------------------------
process_cmd_line();
read_input_file1();
read_input_file2();
#print_options();
#my $threshold_files = print_summary_and_fn_totals();
#annotate_ann_files($threshold_files);

##--------------------------------------------------------------------##
##--- end                                              ms_print.in ---##
##--------------------------------------------------------------------##


