
Valgrind-developer notes, todos re the MacOSX port.

* m_syswrap/syscall-x86-darwin.S
  - correct signal mask is not applied during syscall
  - restart-labels are completely bogus

* m_syswrap/syswrap-darwin.c:
  - PRE(sys_posix_spawn) completely ignores signal issues, and
    also ignores the file_actions argument

* env var handling w/ exec on Darwin: is there something odd?  Compare
  "valgrind env" on Darwin and Linux.  On the former there are
  settings VALGRIND_LIB and VALGRIND_LIB_INNER, but not for the
  former.
  There's a suspicious-looking "#if defined(VGO_darwin)" in 
  VG_(env_remove_valgrind_env_stuff).  Maybe related?

* Cleanups: sort wrappers in syswrap-darwin.c and priv_syswrap-darwin.h
  alphabetically.  Also, some aren't properly implemented -- check and
  print warnings

* Cleanups: m_scheduler/sema.c: use pipe implementation
  (but this apparently causes none/tests/pth_cancel1 to hang.
  I have no idea why, despite quite some investigation).

* Cleanups: m_debugstub: move to attic

* syswrap-darwin.c: sys_{f,}chmod_extended: handling of ARG5 is way
  wrong

* Cleanups (Linux,AIX5): bogus launcher-path mangling logic in
  PRE(sys_execve)

* Cleanups (ALL PLATFORMS): m_signals.c: are the _MY_SIGRETURN
  assembly stubs actually necessary for anything?  I don't know.

* Cleanups: check that changes to VG_(stat) and VG_(stat64) have
  not broken 64-bit statting on 32-bit Linux

* Cleanups: #if !HAVE_PROC in m_main (to do with /proc/<pid>/cmdline

--------

Urr.  Nastyness.  There seem to be 4 different syscall types on
Darwin, with 4 different conventions for returning results.  In order
to determine which syscall type we've got, it is sufficient to look at
the syscall number.  Is that correct?  If that's not true, then it
becomes impossible to write VG_UCONTEXT_SYSCALL_SYSRES for Darwin.


m_main doesn't read symbols for the valgrind exe itself, which is
annoying.  On minimal investigation it seems that the executable isn't
even listed by aspacem.  This is very strange and not in accordance
with the Linux or AIX ports.


m_main: relatedly, Darwin version does not collect/give out
initial debuginfo handles; hence ptrcheck won't work


m_main: Darwin port relies on blocking out big sections of address
space with mmap at startup.  We know from history that this is a bad
idea.  (It's also really slow on 64-bit builds, taking 3--4 seconds.)
Also, startup is not done on the interim startup stack -- why not?


VG_(post_syscall): contains important-looking code that is #if 0'd
out.  Said code does VG_TRACK( post_reg_write).  Needs looking into.


VG_(di_notify_mmap): Linux version is also used for Darwin, and
contains some ifdeffery.  Clean up.


Get rid of priv_types_n_macros.h: RES2, getRES2, etc


PRE(sys_fork), #ifdeffery


syswrap-generic.c: VG_(init_preopened_fds) is #ifdefd for Darwin


scheduler.c: fi VEX_TRC_JMP_NODECODE and VEX_TRC_JMP_SIGSEGV
also: get rid of VG_(lock), VG_(unlock), VG_(unlock_lwpid)
also: VG_(get_thread_out_of_syscall)


look at notes in coregrind/Makefile.am re Mach RPC interface
definitions.  See if we can get rid of any more stuff now that
m_debugstub is gone.
